{"version":3,"sources":["logo.svg","axios.js","componenet/Layout/Layout.js","container/LiveEvents/LiveEvents.js","container/OrgContribution.js","App.js","reportWebVitals.js","index.js"],"names":["console","log","process","instance","axios","create","baseURL","interceptors","response","use","error","message","Promise","resolve","defaults","headers","common","preflightContinue","layout","props","Fragment","href","children","LiveEvents","useState","startDate","setstartDate","endDate","setendDate","projectsIds","setprojectsIds","hashtags","sethashtags","liveEventData","setliveEventData","showAllTable","setshowAllTable","getLiveEventStats","a","apiEndPoint","encodeURI","get","res","data","useMutation","mutate","isLoading","className","type","placeholder","disabled","value","onChange","e","target","onClick","preventDefault","rows","contributersCount","buildingsValidated","mappedFeatures","find","element","key","count","slice","map","item","OrgContribution","fetchStats","useQuery","refetch","Date","LineChart","width","height","margin","left","right","XAxis","dataKey","reversed","tickFormatter","tickItem","getMonth","getFullYear","YAxis","domain","Tooltip","Legend","Line","stroke","withRouter","Layout","fallback","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.7bafe0ea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\n\r\nconsole.log('process.env.REACT_APP_API_BASE',process.env.REACT_APP_API_BASE)\r\n\r\nconst instance = axios.create(\r\n    {\r\n        baseURL: process.env.REACT_APP_API_BASE\r\n    }\r\n);\r\n\r\n\r\ninstance.interceptors.response.use((response) => {\r\n    console.log('response succcess')\r\n    return response;\r\n  }, (error) => {\r\n\r\n\r\n    console.log('API response error',error.message)\r\n    return Promise.resolve({ error });\r\n  });\r\n\r\ninstance.defaults.headers.common = {\r\n    ...instance.defaults.headers.common,\r\n    \r\n    \"Content-Type\": 'application/json',\r\n };\r\n instance.defaults.preflightContinue = true;\r\n \r\nexport default instance;","import React, { useState } from \"react\";\r\n\r\nconst layout = props => {\r\n   \r\n    \r\n    return (\r\n      <React.Fragment>\r\n       \r\n        <div>\r\n            <span> <a href=\"/live-events\"> Live Events</a></span>\r\n            <span> || </span>\r\n            <span> <a href=\"/org-contribution\"> Org Contribution </a></span>\r\n        </div>\r\n        {/* <div class=\"w3-sidebar w3-light-grey w3-bar-block\" >\r\n          <h3 class=\"w3-bar-item\">Menu</h3>\r\n          <a href=\"#\" class=\"w3-bar-item w3-button\">Link 1</a>\r\n          <a href=\"#\" class=\"w3-bar-item w3-button\">Link 2</a>\r\n          <a href=\"#\" class=\"w3-bar-item w3-button\">Link 3</a>\r\n        </div> */}\r\n        <main >{props.children}</main>\r\n      </React.Fragment>\r\n    );\r\n  \r\n}\r\n\r\n\r\nexport default layout;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from \"react-query\";\r\nimport \"./LiveEvents.css\";\r\nimport axios from \"../../axios\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\n\r\nconst LiveEvents = (props) => {\r\n  const [startDate, setstartDate] = useState(\"2021-08-27 09:00:00\");\r\n  const [endDate, setendDate] = useState(\"2021-08-27 11:00:00\");\r\n  const [projectsIds, setprojectsIds] = useState(\r\n    \"11224,10042,9906,1381,11203,10681,8055,8732,11193,7305,11210,10985,10988,11190,6658,5644,10913,6495,4229\"\r\n  );\r\n  const [hashtags, sethashtags] = useState(\"mapandchathour2021\");\r\n\r\n  const [liveEventData, setliveEventData] = useState(null);\r\n  const [showAllTable, setshowAllTable] = useState(false);\r\n  const getLiveEventStats = async () => {\r\n    try {\r\n      console.log(\"calling /live_events\");\r\n      const apiEndPoint = encodeURI(\r\n        `/live_events/${startDate}/${endDate}/${projectsIds}/${\r\n          hashtags ? hashtags : \" \"\r\n        }`\r\n      );\r\n      const res = await axios.get(apiEndPoint);\r\n      console.log(\"res\", res);\r\n      if (res.error);\r\n      else if (!res) {\r\n        // there is an error\r\n        // no result\r\n      } else {\r\n        setliveEventData(res.data);\r\n        console.log(\"res\", res);\r\n        return res.data;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Custom Error\", error);\r\n    }\r\n  };\r\n  const { mutate, isLoading } = useMutation(getLiveEventStats);\r\n  const getData = () => {\r\n    mutate();\r\n    console.log(\"call API\");\r\n  };\r\n  return (\r\n    <>\r\n    \r\n      <div className=\"live-event-style\">\r\n        <label>Event between</label>{\" \"}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Start Date\"\r\n          disabled={isLoading}\r\n          value={startDate}\r\n          onChange={(e) => {\r\n            setstartDate(e.target.value);\r\n          }}\r\n        ></input>\r\n        <label>and</label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"End Date\"\r\n          disabled={isLoading}\r\n          value={endDate}\r\n          onChange={(e) => {\r\n            setendDate(e.target.value);\r\n          }}\r\n        ></input>\r\n        <div>\r\n          <div>\r\n            <label> Project Ids {\" \"}\r\n            <div className=\"tooltip\"> <a href=\"#\" onClick={(e)=>{e.preventDefault()}} className=\"help\">?</a>\r\n            <span className=\"tooltiptext\">Project IDs as comma separated values. They will be used to filter the changesets based HOT TM standard hashtags (hotosm-project-PROJECT_ID)\r\n            <br />\r\n            <br />Filtering is done on the hashtags or the comment fields of a changeset</span>\r\n          </div>\r\n            </label>\r\n            <textarea\r\n              value={projectsIds}\r\n              disabled={isLoading}\r\n              onChange={(e) => {\r\n                setprojectsIds(e.target.value);\r\n              }}\r\n              placeholder=\"Project IDs are entered here, ex: 11224,15985\"\r\n              rows=\"8\"\r\n            />\r\n            \r\n          </div>\r\n          <div>\r\n            <label>Hashtags{\" \"}\r\n            <div className=\"tooltip\"> <a href=\"#\" onClick={(e)=>{e.preventDefault()}} className=\"help\">?</a>\r\n            <span className=\"tooltiptext\">Add here any hashtag that is associated with the event, hashtags will be used to filter the changesets based on the hashtags or comment field\r\n           </span>\r\n          </div></label>\r\n            <textarea\r\n              value={hashtags}\r\n              disabled={isLoading}\r\n              onChange={(e) => {\r\n                sethashtags(e.target.value);\r\n              }}\r\n              placeholder=\"#mapandchathour2021\"\r\n              rows=\"8\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <button\r\n          onClick={getData}\r\n          disabled={startDate === \"\" || endDate === \"\" || projectsIds === \"\" || isLoading}\r\n        >\r\n          Refresh\r\n        </button>\r\n        <div>\r\n        <p>\r\n          Refreshing the insights might take ~ 15 seconds based on the event duration, number of projects and hashtags\r\n        </p>\r\n        {isLoading && <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>}\r\n      </div>\r\n        {liveEventData && !isLoading && (\r\n          <div>\r\n            <div>\r\n              <h1> Total Contributors = {liveEventData.contributersCount}</h1>\r\n              <p>\r\n                Total number of contributors who have mapped at least a feature\r\n                during the specified time span and used one of the projects tags\r\n                (hostosm-project-PROJECT_ID) or an event hashtag in their\r\n                changeset\r\n                <br />\r\n                HOT TM users who have checked/opened TM task and didn't map are\r\n                not counted\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <h2>\r\n                Total Buildings Validated = {liveEventData.buildingsValidated}  out of {liveEventData.mappedFeatures.find(element => element.key === 'building').count} total mapped\r\n              </h2>\r\n              <p>\r\n                {\" \"}\r\n                The total number of validated buildings refers to the total\r\n                buildings which are mapped during the specified time span and\r\n                <strong> exists in a HOT TM validated task</strong>\r\n                <br />\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <h2>\r\n                Event Mapped Features\r\n              </h2>\r\n              <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Feature</th>\r\n                  <th>Count</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {!showAllTable &&\r\n                  liveEventData.mappedFeatures.slice(0, 10).map((item) => (\r\n                    <tr key={item.key}>\r\n                      <td>{item.key}</td>\r\n                      <td>{item.count}</td>\r\n                    </tr>\r\n                  ))}\r\n                {showAllTable &&\r\n                  liveEventData.mappedFeatures.map((item) => (\r\n                    <tr key={item.key}>\r\n                      <td>{item.key}</td>\r\n                      <td>{item.count}</td>\r\n                    </tr>\r\n                  ))}\r\n                  </tbody>\r\n              </table>\r\n              \r\n              <a\r\n                href=\"/\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setshowAllTable(!showAllTable);\r\n                }}\r\n              >\r\n                {showAllTable ? \"Show less\" : \"Show all\"}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n     \r\n    </>\r\n  );\r\n};\r\n\r\nexport default LiveEvents;\r\n","import React from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { Legend, Line, LineChart, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport axios from \"./../axios\";\r\n\r\nconst OrgContribution = props =>\r\n{\r\n\r\n    const fetchStats = async () => {\r\n        try {\r\n          //check api route\r\n          const res = await axios.get(\"/key-stats/asia/Philippines/building\");\r\n    \r\n          if (res.error) {\r\n            console.log(\"Error\", res.error);\r\n            return;\r\n          }\r\n    \r\n          if (!res) {\r\n            console.log(\"No response\");\r\n            return;\r\n          }\r\n          console.log(\"res.data\", res.data);\r\n          // res.data.forEach((d) => {\r\n          //   d.by_month_osm = moment(d.by_month_osm).valueOf(); // date -> epoch\r\n          // });\r\n          return res.data;\r\n        } catch (err) {\r\n          console.log(\"Unexpected Error\", err);\r\n        }\r\n      };\r\n    \r\n      const { data, refetch } = useQuery(\"fetchStats\", fetchStats);\r\n    \r\n      const startDate = new Date(2008, 1, 1);\r\n      const endDate = new Date(2021, 7, 31);\r\n      const formatXAxis = tickItem => {\r\n        return new Date(tickItem).getMonth() + '-' + new Date(tickItem).getFullYear() ;\r\n      }\r\n    return <>\r\n     <div>\r\n        <select>\r\n          <option value=\"africa\">Africa</option>\r\n          <option value=\"asia\">Asia</option>\r\n          <option value=\"africa\">Central America</option>\r\n          <option value=\"africa\">South America</option>\r\n        </select>\r\n        <input type=\"text\" placeholder=\"Country\"></input>\r\n        <input type=\"text\" placeholder=\"Key\"></input>\r\n\r\n        {data && (\r\n          <LineChart\r\n            data={data}\r\n            width={1000}\r\n            height={300}\r\n            margin={{ left: 20, right: 10 }}\r\n          >\r\n            <XAxis\r\n              dataKey=\"by_month_osm\"\r\n              reversed\r\n              tickFormatter={formatXAxis}\r\n            />\r\n            <YAxis domain={[0, 12000000]} />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"accmulative_total_hot\"\r\n              stroke=\"#8884d8\"\r\n            />\r\n\r\n            <Line\r\n              type=\"monotone\"\r\n              dataKey=\"accmulative_total_osm\"\r\n              stroke=\"#82ca9d\"\r\n            />\r\n          </LineChart>\r\n        )}\r\n      </div>\r\n    </>;\r\n}\r\n\r\nexport default OrgContribution;","import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport axios from \"./axios\";\n\nimport { BrowserRouter, Route, withRouter } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport Layout from \"./componenet/Layout/Layout\";\nimport LiveEvents from \"./container/LiveEvents/LiveEvents\";\nimport OrgContribution from \"./container/OrgContribution\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>OSM Insights</h1>\n        <p>It is all about OSM</p>\n      </header>\n\n      <BrowserRouter>\n          <Layout>\n            <Suspense fallback=\"Loading\">\n            <Route path=\"/live-events\" render={(props)=> <LiveEvents {...props} />} ></Route>\n            <Route path=\"/org-contribution\" render={(props)=> <OrgContribution {...props} />} ></Route>\n            \n            </Suspense>\n           \n\n          </Layout>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst queryClient = new QueryClient()\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n    <BrowserRouter >\n      <App></App>\n    </BrowserRouter>\n    </QueryClientProvider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}